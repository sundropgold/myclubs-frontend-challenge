'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledInboxInput = exports.StyledInboxButton = exports.StyledInboxLink = exports.InboxInput = exports.InboxButton = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['\n  ', '\n'], ['\n  ', '\n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _linkToInbox = require('link-to-inbox');

var _lodashTemplate = require('lodash-template');

var _lodashTemplate2 = _interopRequireDefault(_lodashTemplate);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LinkToInbox = function (_React$Component) {
  _inherits(LinkToInbox, _React$Component);

  function LinkToInbox() {
    _classCallCheck(this, LinkToInbox);

    return _possibleConstructorReturn(this, (LinkToInbox.__proto__ || Object.getPrototypeOf(LinkToInbox)).apply(this, arguments));
  }

  _createClass(LinkToInbox, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          templ = _props.template,
          style = _props.style,
          subject = _props.subject,
          sender = _props.sender,
          email = _props.email,
          tag = _props.tag,
          guessUnknownDomain = _props.guessUnknownDomain,
          className = _props.className;

      if (!email) {
        throw new Error('email is required');
      }
      if (!email.includes('@')) {
        throw new Error('Invalid email address ' + email);
      }

      tag = tag || 'a';
      templ = templ || 'Open in <%- name %>';

      var filter = { subject: subject, sender: sender };
      var spec = (0, _linkToInbox.getSpec)(email, filter, true);
      var href = (0, _linkToInbox.getHref)(email, filter, true);

      if (!spec) {
        if (!guessUnknownDomain) {
          return null;
        }
        var domain = email.split('@')[1];
        spec = {
          name: domain,
          protocol: 'https',
          domain: domain,
          path: ''
        };
      }

      if (!href) {
        href = spec.protocol + '://' + spec.domain + spec.path;
      }

      var msg = (0, _lodashTemplate2.default)(templ)(_extends({ subject: subject, email: email, sender: sender, href: href }, spec));
      function clickHandler() {
        window.open(href);
      }

      switch (tag) {
        case 'a':
          return _react2.default.createElement(
            'a',
            { href: href, className: className, style: style },
            msg
          );
        case 'button':
          return _react2.default.createElement(
            'button',
            { onClick: clickHandler, className: className, style: style },
            msg
          );
        case 'input':
          return _react2.default.createElement('input', { type: 'button', onClick: clickHandler, value: msg, className: className, style: style });
        default:
          console.error('unrecognized tag ' + tag);
          throw new Error('unrecognized tag ' + tag);
      }
    }
  }]);

  return LinkToInbox;
}(_react2.default.Component);

LinkToInbox.propTypes = {
  template: _react2.default.PropTypes.string,
  subject: _react2.default.PropTypes.string,
  sender: _react2.default.PropTypes.string,
  tag: _react2.default.PropTypes.oneOf(['a', 'button', 'input']),
  guessUnknownDomain: _react2.default.PropTypes.boolean,
  email: function email(props, propName) {
    if (!props[propName]) {
      return new Error('email is required');
    }
    if (!props[propName].includes('@')) {
      return new Error('email must be a valid email address, got ' + props[propName]);
    }
  },
  style: _react2.default.PropTypes.string,
  className: _react2.default.PropTypes.string
};

exports.default = LinkToInbox;
var InboxButton = exports.InboxButton = function InboxButton(props) {
  return _react2.default.createElement(LinkToInbox, _extends({ tag: 'button' }, props));
};
var InboxInput = exports.InboxInput = function InboxInput(props) {
  return _react2.default.createElement(LinkToInbox, _extends({ tag: 'input' }, props));
};

var commonStyles = '\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 12px;\n  padding: 10px 24px;\n  cursor: pointer;\n';

var buttonStyles = '\n  ' + commonStyles + '\n  border: 1px solid #9768BA;\n  background-color:#9768BA;\n  color:white;\n  border-radius: 20px;\n  transition: all .05s ease-in-out;\n  box-sizing: border-box;\n  letter-spacing: .01em;\n  text-transform: capitalize;\n\n  &:focus {\n    background-color:#8751AF;\n    border-color: #8751AF;\n    box-shadow: 0 0 0 1px #fff, 0 0 0 3px rgba(80, 40, 120, 0.75);\n    outline: none;\n  }\n\n  &:hover {\n    background-color:#8751AF;\n    border-color: #8751AF;\n  }\n\n  &:active {\n    box-shadow: 0 0 0 1px #fff, 0 0 0 3px rgba(80, 40, 120, 0.75);\n    border-color: #8751AF;\n    background-image: linear-gradient(rgba(0,0,0,0),rgba(0,0,0,0.15));\n    /*outline: none;*/\n  }';

var linkStyles = '\n  ' + commonStyles + '\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n    color:#8751AF;\n  }\n\n  &:focus {\n    text-decoration: underline;\n    color:#8751AF;\n    outline: none;\n  }\n';

var StyledInboxLink = exports.StyledInboxLink = (0, _styledComponents2.default)(LinkToInbox)(_templateObject, linkStyles);

var StyledInboxButton = exports.StyledInboxButton = (0, _styledComponents2.default)(InboxButton)(_templateObject, buttonStyles);
var StyledInboxInput = exports.StyledInboxInput = (0, _styledComponents2.default)(InboxInput)(_templateObject, buttonStyles);
